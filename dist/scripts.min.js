let pokemonRepository = (function () {
  let e = [];
  function t(t) {
    !0 ===
      (function e(t) {
        if ("object" != typeof t)
          return (
            console.log(
              "Element you tried to add to pokemonlist wasn't an object."
            ),
            !1
          );
        {
          let n = Object.keys(t);
          return (
            (-1 !== n.indexOf("name") && -1 !== n.indexOf("detailsUrl")) ||
            (console.log("Object doesn't possess all the required attributes."),
            fals)
          );
        }
      })(t) && e.push(t);
  }
  function n() {
    return e;
  }
  function i(e) {
    return (
      a(),
      fetch(e.detailsUrl)
        .then(function (e) {
          return e.json();
        })
        .then(function (t) {
          (e.imageUrl = t.sprites.front_default),
            (e.height = t.height),
            (e.types = t.types),
            r();
        })
        .catch(function (e) {
          r(), console.error(e);
        })
    );
  }
  function o(e) {
    i(e).then(function () {
      var t;
      let n, i, o, a, r;
      console.log(e),
        (t = e),
        (n = document.querySelector(".modal-title")),
        (i = document.querySelector(".modal-body")),
        document.querySelector(".modal-footer"),
        (n.innerText = ""),
        (i.innerText = ""),
        (o = document.createElement("img")).classList.add("pokemon-image"),
        o.classList.add("image-fluid"),
        (o.src = t.imageUrl),
        (n.innerText = "name: ".concat(t.name)),
        ((a = document.createElement("p")).innerText = "height: " + t.height),
        (r = document.createElement("p")),
        t.types[1]
          ? (r.innerText =
              "types: " + t.types[0].type.name + ", " + t.types[1].type.name)
          : (r.innerText = "types: " + t.types[0].type.name),
        i.append(o),
        i.append(a),
        i.append(r);
    });
  }
  function a() {
    let e = document.querySelector(".dex_container"),
      t = document.createElement("p");
    t.setAttribute("class", "loadingMessage"),
      (t.innerText = "Loading"),
      e.appendChild(t);
  }
  function r() {
    let e = document.querySelector(".loadingMessage");
    e.parentElement.removeChild(e);
  }
  return (
    window.addEventListener("keydown", (e) => {
      "Escape" === e.key &&
        modalContainer.classList.contains("is-visible") &&
        hideModal();
    }),
    {
      add: t,
      getAll: n,
      search: function t(n) {
        return e.filter((e) => e.name === n);
      },
      addListItem: function e(t) {
        let n = document.querySelector(".pokemon-list"),
          i = document.createElement("li");
        i.classList.add("list-group-item");
        let a = document.createElement("button");
        a.classList.add("btn"),
          a.classList.add("btn-primary"),
          a.classList.add("active"),
          a.setAttribute("aria-pressed", !0),
          a.setAttribute("data-toggle", "modal"),
          a.setAttribute("data-target", "#modal-container"),
          (a.innerText = t.name),
          a.addEventListener("click", function () {
            o(t);
          }),
          a.classList.add("pokemon-button"),
          i.appendChild(a),
          n.appendChild(i);
      },
      loadList: function e() {
        return (
          a(),
          fetch("https://pokeapi.co/api/v2/pokemon/?limit=150")
            .then(function (e) {
              return e.json();
            })
            .then(function (e) {
              e.results.forEach(function (e) {
                t({ name: e.name, detailsUrl: e.url });
              });
            })
            .then(r())
            .catch(function (e) {
              r(), console.error(e);
            })
        );
      },
      loadDetails: i,
      showLoadingMessage: a,
      showDetails: o,
    }
  );
})();
pokemonRepository.loadList().then(function () {
  pokemonRepository.getAll().forEach(function (e) {
    pokemonRepository.addListItem(e);
  });
});
